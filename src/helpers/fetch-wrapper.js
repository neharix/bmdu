import axios from "axios";
import { useAuthStore } from "@/stores/auth.store.js";
import baseUrl from "@/helpers/base.js";

export const fetchWrapper = {
  get: request("GET"),
  post: request("POST"),
  put: request("PUT"),
  delete: request("DELETE"),
};

function request(method) {
  return async (url, body = null) => {
    try {
      const config = {
        method,
        url: url.startsWith(baseUrl) ? url : `${baseUrl}${url}`,
        headers: authHeader(url),
        data: body,
      };

      const response = await axios(config);
      return response.data; // Axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON
    } catch (error) {
      return handleResponse(error);
    }
  };
}

// üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function authHeader(url) {
  const { accessToken } = useAuthStore();
  const isLoggedIn = !!accessToken;
  const isApiUrl = url.startsWith(baseUrl);

  if (isLoggedIn && isApiUrl) {
    return { Authorization: `BMDU ${accessToken}` };
  }
  return {};
}

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async function handleResponse(error) {
  const { accessToken, refreshToken, logout, setTokens } = useAuthStore();

  if (error.response) {
    // –ï—Å–ª–∏ 401 Unauthorized
    if (error.response.status === 401 && accessToken && refreshToken) {
      try {
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        const refreshed = await refreshAccessToken(refreshToken);
        if (refreshed) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const retryConfig = error.config;
          retryConfig.headers["Authorization"] = `BMDU ${useAuthStore().accessToken}`;
          const retryResponse = await axios(retryConfig);
          return retryResponse.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        }
      } catch (refreshError) {
        console.log("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", refreshError);
      }
    }

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏–ª–∏ 403 –∏ accessToken –µ—Å—Ç—å, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
    if ([401, 403].includes(error.response.status) && accessToken) {
      console.log("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      logout();
    }

    return Promise.reject(error.response.data?.message || error.response.statusText);
  }

  return Promise.reject("Network error");
}

// üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function refreshAccessToken(refreshToken) {
  const { setTokens } = useAuthStore();
  try {
    const response = await axios.post(`${baseUrl}/api/token/refresh/`, { refresh: refreshToken });
    setTokens(response.data.access, refreshToken);
    return true;
  } catch (error) {
    return false; // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
  }
}
